/*
 * Copyright (c) 2021 Henry 李恒 (henry.box@outlook.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package pub.ihub.plugin.githooks

import groovy.transform.CompileStatic
import groovy.transform.TupleConstructor
import org.gradle.api.logging.Logger
import pub.ihub.plugin.IHubExtension
import pub.ihub.plugin.IHubProjectExtensionAware
import pub.ihub.plugin.IHubProperty

import java.nio.file.Path

import static java.nio.charset.StandardCharsets.UTF_8
import static java.nio.file.Files.createDirectories
import static java.nio.file.Files.write
import static pub.ihub.plugin.IHubProperty.Type.PROJECT
import static pub.ihub.plugin.IHubProperty.Type.SYSTEM



/**
 * IHub Git Hooks插件扩展
 * @author henry
 */
@IHubExtension('iHubGitHooks')
@CompileStatic
@TupleConstructor(allProperties = true, includes = 'project')
class IHubGitHooksExtension implements IHubProjectExtensionAware {

    /**
     * 自定义hooks路径
     */
    @IHubProperty(type = [PROJECT, SYSTEM])
    String hooksPath

    /**
     * 自定义hooks
     */
    @IHubProperty(type = [])
    Map<String, String> hooks = [:]

    void writeHook(String hookName, String command) {
        Path scriptPath = project.layout.projectDirectory.dir('.gradle').dir('pub.ihub.plugin.hooks').asFile
            .toPath().resolve hookName
        createDirectories scriptPath.parent
        write scriptPath, [
            '#!/bin/bash', '# This file is generated by the \'pub.ihub.plugin.ihub-git-hooks\' Gradle plugin',
            "echo 'ihub $hookName hook: $command'", command
        ].join('\n').getBytes(UTF_8)
        scriptPath.toFile().setExecutable true, false
    }

    void writeHooks() {
        hooks.forEach this::writeHook
    }

    static void execute(String hooksPath, Map<String, String> hooks, IHubGitHooksExtension extension) {
        Logger logger = extension.project.logger
        try {
            if (hooksPath) {
                "git config core.hooksPath $hooksPath".execute()
                logger.lifecycle 'Set git hooks path: ' + hooksPath
            } else if (hooks) {
                extension.writeHooks()
                'git config core.hooksPath .gradle/pub.ihub.plugin.hooks'.execute()
                logger.lifecycle 'Set git hooks path: .gradle/pub.ihub.plugin.hooks'
            } else {
                'git config --unset core.hooksPath'.execute()
                logger.lifecycle 'Unset git hooks path, learn more see https://doc.ihub.pub/plugins/#/iHubGitHooks'
            }
        } catch (e) {
            logger.lifecycle 'Git hooks config fail: ' + e.message
        }
    }

}
